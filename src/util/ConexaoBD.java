/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Exercicio;

import com.mysql.cj.xdevapi.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class ConexaoBD extends javax.swing.JFrame {

    /**
     * Creates new form ConexaoBD
     */
    public ConexaoBD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNOME = new javax.swing.JTextField();
        txtEMAIL = new javax.swing.JTextField();
        cmbOpcoes = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        btLIMPAR = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCADASTRO = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Conexão com BD");

        jLabel2.setText("ID:");

        jLabel3.setText("Nome:");

        jLabel4.setText("E-mail:");

        jLabel5.setText("Opção:");

        txtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDFocusLost(evt);
            }
        });
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        txtNOME.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNOMEFocusLost(evt);
            }
        });

        txtEMAIL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEMAILFocusLost(evt);
            }
        });

        cmbOpcoes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "INSERIR", "ALTERAR", "DELETAR", "SELECIONAR POR ID", "SELECIONAR POR NOME", "SELECIONAR POR E-MAIL" }));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btLIMPAR.setText("LIMPAR");
        btLIMPAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLIMPARActionPerformed(evt);
            }
        });

        tbCADASTRO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "E-MAIL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbCADASTRO);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btLIMPAR))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(40, 40, 40)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNOME, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                    .addComponent(txtEMAIL)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEMAIL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btLIMPAR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNOMEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNOMEFocusLost
        // TODO add your handling code here:
        String nome = txtNOME.getText().toUpperCase();
        txtNOME.setText(nome);
    }//GEN-LAST:event_txtNOMEFocusLost

    private void txtEMAILFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEMAILFocusLost
        // TODO add your handling code here:
        String email = txtNOME.getText().toUpperCase();
        txtNOME.setText(email);
    }//GEN-LAST:event_txtEMAILFocusLost

    private void btLIMPARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLIMPARActionPerformed
        // TODO add your handling code here:
    txtID.setText("");
    txtNOME.setText("");
    txtEMAIL.setText("");
    }//GEN-LAST:event_btLIMPARActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(cmbOpcoes.getSelectedItem().equals("INSERIR")) {
            int id  = Integer.parseInt(txtID.getText());
            String nome = txtNOME.getText();
            String email = txtEMAIL.getText();
            
            INSERIR(id, nome, email);
        }
        if(cmbOpcoes.getSelectedItem().equals("ALTERAR")) {
            int id  = Integer.parseInt(txtID.getText());
            String nome = txtNOME.getText();
            String email = txtEMAIL.getText();
            
            ALTERAR(id, nome, email);
        }
        if(cmbOpcoes.getSelectedItem().equals("DELETAR")) {
            int id  = Integer.parseInt(txtID.getText());
            
            DELETAR(id);
        }
        if(cmbOpcoes.getSelectedItem().equals("SELECIONAR POR ID")) {
            int id  = Integer.parseInt(txtID.getText());
            
            SELECIONARID(id);
        }
        if(cmbOpcoes.getSelectedItem().equals("SELECIONAR POR NOME")) {
             String nome = txtNOME.getText();
             
            SELECIONARNOME(nome); 
        }
        if(cmbOpcoes.getSelectedItem().equals("SELECIONAR POR E-MAIL")) {
            String email = txtEMAIL.getText();
            
            SELECIONAREMAIL(email);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtIDFocusLost

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConexaoBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConexaoBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConexaoBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConexaoBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConexaoBD().setVisible(true);
            }
        });
    }
    private void INSERIR (int id,String nome, String email) {
        
        try {
                Connection conn = conexao.getConnection();
            
                    String stm = "insert into cadastros values (?, ?, ?)";
                    
                    PreparedStatement pt = conn.prepareStatement(stm);
        
                    pt.setInt(1, id);
                    pt.setString(2, nome);
                    pt.setString(3, email);
                    int rt = pt.executeUpdate();
                    
                    if(rt == 1){
                        JOptionPane.showMessageDialog(null, "Cadastro inserido com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(null, "Cadastro não foi inserido", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    pt.close();
                    conn.close();
        
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void ALTERAR(int id, String nome, String email){
        
        try {
            Connection conn = conexao.getConnection();
                    
            String stm = "update cadastros id = ?, nome = ?, where email =";
        
                    PreparedStatement pt = conn.prepareStatement(stm);
        
                    pt.setInt(1, id);
                    pt.setString(2, nome);
                    pt.setString(3, email);
                    int rt = pt.executeUpdate();
        
                    if(rt == 1){
                        JOptionPane.showMessageDialog(null, "Cadastro alterado com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(null, "Cadastro não foi alterado", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    pt.close();
                    conn.close();
        
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void DELETAR(int id){
        
        try {
            Connection conn = conexao.getConnection();
                    
            String stm = "delete from cadastros where id = ?";
        
                    PreparedStatement pt = conn.prepareStatement(stm);
                    
                    pt.setInt(1, id);
                    int rt = pt.executeUpdate();
        
                    if(rt == 1){
                        JOptionPane.showMessageDialog(null, "Cadastro removido com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(null, "Cadastro não removido", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    pt.close();
                    conn.close();
 
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }
    private void SELECIONARID(int id){
        
        try {
            Connection conn = conexao.getConnection();
            
                    String stm = "select * from cadastros where id = ?";
        
                    PreparedStatement pt = conn.prepareStatement(stm);
        
                    pt.setInt(1, id);
        
                    ResultSet rt = pt.executeQuery();
                    
                    DefaultTableModel tabela = (DefaultTableModel) tbCADASTRO.getModel();
                    while (rt.next()){
                        String linhas[] = new String[] {
                            rt.getString("id"),
                            rt.getString("nome"),
                            rt.getString("email")};
                        tabela.addRow(linhas);
                    }
                    rt.close();
                    pt.close();
                    conn.close();
        
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void SELECIONARNOME(String nome){
        
        try {
            Connection conn = conexao.getConnection();
                   
            String stm = "select * from cadastros where nome = ?";
        
                    PreparedStatement pt = conn.prepareStatement(stm);
        
                    pt.setString(1, nome);
        
                    ResultSet rt = pt.executeQuery();
                    
                    DefaultTableModel tabela = (DefaultTableModel) tbCADASTRO.getModel();
                    
                    while (rt.next()){
                        String linhas[] = new String[] {
                            rt.getString("id"),
                            rt.getString("nome"),
                            rt.getString("email")};
                        tabela.addRow(linhas);
                    }
                    rt.close();
                    pt.close();
                    conn.close();
                    
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void SELECIONAREMAIL(String email){
        
        try {
            Connection conn = conexao.getConnection();
            
            String stm = "select * from cadastros where email = ?";
        
            PreparedStatement pt = conn.prepareStatement(stm);
        
            pt.setString(1, email);
            
            ResultSet rt = pt.executeQuery();
            
            DefaultTableModel tabela = (DefaultTableModel) tbCADASTRO.getModel();
                    
                    while (rt.next()){
                        String linhas[] = new String[] {
                            rt.getString("id"),
                            rt.getString("nome"),
                            rt.getString("email")};
                        tabela.addRow(linhas);
                    }
                    rt.close();
                    pt.close();
                    conn.close();
        
        } catch (Exception ex) {
            Logger.getLogger(ConexaoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLIMPAR;
    private javax.swing.JComboBox<String> cmbOpcoes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tbCADASTRO;
    private javax.swing.JTextField txtEMAIL;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNOME;
    // End of variables declaration//GEN-END:variables

    

}
